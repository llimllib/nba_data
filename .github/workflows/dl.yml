name: Update data

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: "0 */4 * * *" # Every 4 hours

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging jobs
    permissions:
      contents: write
      issues: write

    steps:
      - uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v7

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # git pulls are failing, this seems to help a tiny bit?
          git config --global http.version HTTP/1.1
          git config --global http.postBuffer 524288000

      # nba.com doesn't let me use a github actions IP, so route through tailscale
      # https://til.simonwillison.net/tailscale/tailscale-github-actions
      - name: Setup Tailscale
        uses: tailscale/github-action@v4
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_OAUTH_SECRET }}
          tags: tag:github-actions

      # you can't set the exit-node name at 'up' time; so instead set it after
      # we've gotten up and running
      # https://github.com/tailscale/github-action/issues/123
      # https://github.com/tailscale/tailscale/issues/4152#issuecomment-1066126643
      - name: use named exit node in tailscale
        run: |
          timeout 5m sudo -E tailscale set --exit-node=apple-tv --exit-node-allow-lan-access=true

      - name: Verify exit node is online and working
        run: |
          echo "Checking Tailscale status..."
          STATUS=$(sudo tailscale status --json)

          # Check if we're using an exit node
          EXIT_NODE=$(echo "$STATUS" | jq -r '.ExitNodeStatus.Online // "null"')

          if [ "$EXIT_NODE" != "true" ]; then
            echo "❌ ERROR: Exit node 'apple-tv' is not online!"
            echo "Exit node status: $EXIT_NODE"
            exit 1
          fi

          echo "✅ Exit node is online"

          # Verify we can actually reach the internet through it
          echo "Testing connectivity through exit node..."
          if ! curl --max-time 10 -s https://www.google.com > /dev/null; then
            echo "❌ ERROR: Cannot reach internet through exit node"
            exit 1
          fi

          echo "✅ Internet connectivity confirmed through exit node"

      - name: Run update
        run: make update-ci
        env:
          # I've been getting errors doing git operations because the network
          # over tailscale can be quite slow
          GIT_HTTP_LOW_SPEED_LIMIT: 0
          GIT_HTTP_LOW_SPEED_TIME: 600
          GIT_CURL_VERBOSE: 1
          GIT_TIMEOUT: 300
          # sometimes uv fails when downloading packages; increase its timeout
          UV_HTTP_TIMEOUT: 600
        continue-on-error: false

      # Disable exit node before accessing GitHub API
      - name: Disable Tailscale exit node
        if: always()
        run: |
          sudo -E tailscale set --exit-node=

      # if there's a failure:
      # - check for an existing ticket
      # - make one if not found
      # - otherwise add the failure to the ticket
      #
      # the idea here is to avoid getting an avalanche of tickets when something breaks
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const issueTitle = 'Data update workflow failed';

            // Search for an open issue with our title
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              creator: 'github-actions[bot]'
            });

            const existingIssue = issues.data.find(issue => issue.title === issueTitle);
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            if (existingIssue) {
              // Add a comment to the existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `Another failure detected in workflow run: ${runUrl}`
              });
              console.log(`Added comment to existing issue #${existingIssue.number}`);
            } else {
              // Create a new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: `Workflow run failed: ${runUrl}\n\nPlease check the workflow logs for details.`
              });
              console.log(`Created new issue #${newIssue.data.number}`);
            }
