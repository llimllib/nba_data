Pretty sure this command will download all teams' game log data, when I'm not on hotel wifi:

from nba_api.stats.endpoints import teamgamelog
import pandas as pd
from nba_api.stats.static import teams

games = pd.concat(
    [
        teamgamelog.TeamGameLog(tid, season="2021-22").get_data_frames()
        for tid in [t[0] for t in teams.teams]
    ]
)

Instead I did:

stats = {t[0]: None for t in teams.teams}
for team in stats:
    if stats[team]:
        continue
    stats[team] = teamgamelog.TeamGameLog(
        team, season="2021-22", timeout=100
    ).get_data_frames()

So that I could re-run it when it inevitably failed

Then I combined them all with:

allgamelog = pd.concat([v[0] for v in stats.values()])

this data set of course has every game twice. Wrote it to parquet with:

allgamelog.to_parquet("2022gamelog.parquet")

Installed duckdb with `pip install duckdb`

https://www.sportsrec.com/471793-what-does-pct-mean-in-baseball.html says to start by calculating possessions:

Calculate the number of total number of possessions for your team using the formula: field goals attempted - offensive rebounds + turnovers + (0.4 x free throws attempted)

- this site: https://www.nbastuffer.com/analytics101/possession/
    - gives two formulas, a "basic" one and a more complex one:
    - Basic Possession Formula = 0.96*[(Field Goal Attempts)+(Turnovers)+0.44*(Free Throw Attempts)-(Offensive Rebounds)]
    - More Specific Possession Formula =
        0.5*( (Field Goal Attempts + 0.4*Free Throw Attempts –
                   1.07*(Offensive Rebounds/
                     (Offensive Rebounds + Opponent Defensive Rebounds)
                   ) *
                   (Field Goal Attempts – FG) + Turnovers
               ) +
               (Opponent Field Goal Attempts + 0.4*(Opponent Free Throw Attempts) –
                   1.07*(Opponent Offensive Rebounds)/
                     (Opponent Offensive Rebounds + Defensive Rebounds)
                    ) *
                    (Opponent Field Goal Attempts – Opponent FG) + Opponent Turnovers)
               )
    - it might make sense to create a table indexed on game_id, with columns for teamA and teamB?

# d is the dataframe from above with all games in it
d["possessions"] = d["FGA"] - d["OREB"] + d["TOV"] + 0.4 * d["FTA"]
allgamelog["possessions"] = allgamelog["FGA"] - allgamelog["OREB"] + allgamelog["TOV"] + 0.4 * allgamelog["FTA"]

# now offensive efficiency is just pts / poss
d["o_eff"] = d["PTS"] / d["possessions"]
allgamelog["o_eff"] = allgamelog["PTS"] / allgamelog["possessions"]

# defensive efficiency, similarly is the opposite. Now however we have a problem with the data model! We need to get the game with the same id but different team_id, and take their o_eff as _our_ d_eff

# also, other sources have the FTA modifier as .45 or .475

To select a row with two conditions, you need to use the bitwise & and/or | operators, which pandas overloads. Ex:

a[(a["Team_ID"] != 1610612737) & (a["Game_ID"] == "0022101221")]

(Where a is short for allgamelog)

To get defensive efficiency, we need to apply a function over all rows (axis=1), convert the resulting data frame into a series by selecting the first (and should be only) row (this took me _forever_ to figure out), and picking the column we want:

a["d_eff"] = a.apply(
    lambda row: a[
        (a["Game_ID"] == row["Game_ID"]) &
        (a["Team_ID"] != row["Team_ID"])].iloc[0]["o_eff"],
    axis=1)

rename the `index` column that resulted from running "reset_index()" to move the game number from an index to a column:

a.reset_index().rename(columns={"index": "game_n"})

Then, finally I can write a game log that includes possessions, offensive and defensive efficiency:

a.to_parquet("2022gamelog.parquet")

Next up, figure out what the proper free throw adjustment is

------------------

Player stats

# https://github.com/swar/nba_api/blob/master/docs/nba_api/stats/endpoints/cumestatsplayer.md
from nba_api.stats.endpoints import CumeStatsPlayer

# get JT's results from the first game
game_data, player_data = CumeStatsPlayer("1628369", ["0022200001"], season='2022-23').get_data_frames()

- probably a helpful thing to do is to go to the website and see what calls it makes
    - I found LeagueDashPlayerStats at https://www.nba.com/stats/players/ , which has advanced stats and basic stats

from nba_api.stats.endpoints import LeagueDashPlayerStats
statsdf = LeagueDashPlayerStats(season="2021-22").get_data_frames()[0]

# there it is!. Set measure type to "Advanced" for TS% and USG%
advdf = LeagueDashPlayerStats(
    season="2021-22", measure_type_detailed_defense="Advanced"
).get_data_frames()[0]

# Set per_mode_detailed to 'PerGame' for averages, or 'Per36' for per 36 minutes, or 'Per100Possessions' for... you get the idea. It defaults to 'Totals'
# https://github.com/swar/nba_api/blob/master/docs/nba_api/stats/endpoints/leaguedashplayerstats.md
per36 = LeagueDashPlayerStats(
    season="2021-22", per_mode_detailed='Per36'
).get_data_frames()[0]


- I should probably submit a PR to improve the docuumentation of measure_type_detailed_defense (which has an inaccurate name?) and per_mode_detailed
    - measure_type_detailed_defense can take "Base" or "Advanced", which don't seem to be included as options in the enum
